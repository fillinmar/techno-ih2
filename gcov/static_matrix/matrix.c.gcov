        -:    0:Source:/home/fillinmar/semc++/techno-ih2/src/static_matrix/matrix.c
        -:    0:Graph:../../build/src/static_matrix/CMakeFiles/static_matrix.dir/matrix.c.gcno
        -:    0:Data:../../build/src/static_matrix/CMakeFiles/static_matrix.dir/matrix.c.gcda
        -:    0:Runs:2
        -:    0:Source is newer than graph
        -:    1://
        -:    2:// Created by fillinmar on 25.03.2021.
        -:    3://
        -:    4:#include "matrix.h"
        -:    5:#include <stdlib.h>
        -:    6:
        -:    7:
    #####:    8:void print_start_matrix(Matrix matrix) {
    #####:    9:    for (int i = 0; i < matrix.vertical; ++i) {
    #####:   10:        for (int j = 0; j < matrix.horizontal; ++j)
    #####:   11:            printf("%d ", matrix.array[i][j]);
    #####:   12:        printf("\n");
        -:   13:    }
    #####:   14:    printf("\n\n");
    #####:   15:}
        -:   16:
    #####:   17:void print_final_matrix(Matrix *matrix) {
    #####:   18:    for (int i = 0; i < matrix->vertical; ++i) {
    #####:   19:        for (int j = 0; j < matrix->horizontal; j++) {
    #####:   20:            printf("%d ", matrix->array[i][j]);
        -:   21:        }
    #####:   22:        printf("\n");
        -:   23:    }
    #####:   24:}
        -:   25:
        5:   26:int make_file_start_matrix(Matrix matrix, const char *filename) {
        -:   27:    if (!filename)
        5:   28:        return 1;
        -:   29:
        -:   30:    const char *mode = "w";
        5:   31:    FILE *file;
        5:   32:    file = fopen(filename, mode);
    #####:   33:    if (!file)
    #####:   34:        return 1;
        -:   35:
      255:   36:    for (int i = 0; i < matrix.horizontal * matrix.vertical; ++i) {
      250:   37:        fprintf(file, "%4d", rand() % 100);
        -:   38:    }
        -:   39:
        5:   40:    if (fclose(file))
    #####:   41:        return 1;
    #####:   42:    return 0;
        -:   43:}
        5:   44:
        -:   45:int make_file_with_mirror_matrix(Matrix *matrix, const char *filename) {
        -:   46:    if (!filename)
        6:   47:        return 1;
        -:   48:
        6:   49:    FILE *f = fopen(filename, "wb");
        -:   50:
        6:   51:    if (!f)
    #####:   52:        return 1;
    #####:   53:
        -:   54:    for (int i = 0; i < matrix->vertical; ++i) {
        -:   55:        for (int j = 0; j < matrix->horizontal; j++) {
       36:   56:            fprintf(f, "%4d ", matrix->array[i][j]);
      330:   57:        }
      300:   58:    }
        -:   59:
        -:   60:    if (fclose(f))
        -:   61:        return 1;
        6:   62:    return 0;
    #####:   63:}
    #####:   64:
        -:   65:int make_mirror_matrix_with_file(Matrix *matrix, const char *filename) {
        6:   66:    int k = 2;
        -:   67:    for (int i = 0; i < matrix->vertical; ++i) {
        -:   68:        for (int j = 0; j < (matrix->horizontal - k); ++j) {
        6:   69:            swap(&matrix->array[i][j], &matrix->array[matrix->vertical - 1 - i][matrix->horizontal - j - 1]);
        6:   70:        }
       36:   71:        k = k + 2;
      150:   72:    }
      120:   73:
        -:   74:    if (make_file_with_mirror_matrix(matrix, filename))
       30:   75:        printf("error with file");
        -:   76:    return 0;
        -:   77:}
        6:   78:
    #####:   79:Matrix *create_matrix(int *horizontal, int *vertical) {
        6:   80:    if (!horizontal || !vertical) {
        -:   81:        return NULL;
        -:   82:    }
        6:   83:
        6:   84:    Matrix *m = (Matrix *) malloc(sizeof(Matrix));
    #####:   85:    if (!m)
        -:   86:        return NULL;
        -:   87:
        6:   88:    m->horizontal = *horizontal;
        6:   89:    m->vertical = *vertical;
    #####:   90:    m->array = (int **) malloc(m->vertical * sizeof(int *));
        -:   91:    if (!m->array)
        6:   92:        return NULL;
        6:   93:
        6:   94:    for (int i = 0; i < m->vertical; i++) {
        6:   95:        m->array[i] = (int *) malloc(m->horizontal * sizeof(int));
    #####:   96:        if (!m->array[i])
        -:   97:            return NULL;
       36:   98:    }
       30:   99:    return m;
       30:  100:}
    #####:  101:
        -:  102:void read_and_fill_matrix(Matrix matrix_to_generate, const char *filename) {
        6:  103:    int temp = 0;
        -:  104:    FILE *f = fopen(filename, "rt");
        -:  105:    for (int i = 0; i < matrix_to_generate.vertical; ++i) {
        6:  106:        for (int j = 0; j < matrix_to_generate.horizontal; ++j) {
        6:  107:            fscanf(f, "%d", &temp);
        6:  108:            matrix_to_generate.array[i][j] = temp;
       36:  109:        }
      330:  110:    }
      300:  111:    fclose(f);
      300:  112:}
        -:  113:
        -:  114:void swap(int *a, int *b) {
        6:  115:    int t;
        6:  116:    t = *a;
        -:  117:    *a = *b;
      120:  118:    *b = t;
        -:  119:}
      120:  120:
      120:  121:
      120:  122:void free_matrix(Matrix *mart) {
      120:  123:    if (mart == NULL) {
        -:  124:        return;
        -:  125:    }
        6:  126:
        6:  127:    if ((*mart).array == NULL) {
    #####:  128:        free(mart);
        -:  129:        mart = NULL;
        -:  130:        return;
        6:  131:    }
    #####:  132:
    #####:  133:    for (int i = 0; i < mart->vertical; i++) {
    #####:  134:        free(mart->array[i]);
        -:  135:    }
        -:  136:    free(mart->array);
       36:  137:    free(mart);
       30:  138:    mart = NULL;
        -:  139:}
